{"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.controller.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.controller.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":18},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":42}},"7":{"start":{"line":9,"column":16},"end":{"line":9,"column":41}},"8":{"start":{"line":10,"column":27},"end":{"line":10,"column":66}},"9":{"start":{"line":11,"column":30},"end":{"line":11,"column":75}},"10":{"start":{"line":12,"column":15},"end":{"line":12,"column":36}},"11":{"start":{"line":13,"column":21},"end":{"line":13,"column":47}},"12":{"start":{"line":14,"column":20},"end":{"line":14,"column":45}},"13":{"start":{"line":15,"column":0},"end":{"line":85,"column":3}},"14":{"start":{"line":16,"column":32},"end":{"line":16,"column":85}},"15":{"start":{"line":21,"column":4},"end":{"line":36,"column":7}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":48}},"17":{"start":{"line":23,"column":44},"end":{"line":23,"column":86}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":95}},"19":{"start":{"line":25,"column":8},"end":{"line":27,"column":10}},"20":{"start":{"line":28,"column":8},"end":{"line":31,"column":10}},"21":{"start":{"line":32,"column":8},"end":{"line":35,"column":10}},"22":{"start":{"line":37,"column":4},"end":{"line":60,"column":7}},"23":{"start":{"line":38,"column":8},"end":{"line":51,"column":11}},"24":{"start":{"line":39,"column":12},"end":{"line":44,"column":16}},"25":{"start":{"line":39,"column":58},"end":{"line":44,"column":14}},"26":{"start":{"line":40,"column":16},"end":{"line":40,"column":122}},"27":{"start":{"line":41,"column":16},"end":{"line":41,"column":56}},"28":{"start":{"line":42,"column":16},"end":{"line":42,"column":72}},"29":{"start":{"line":43,"column":16},"end":{"line":43,"column":91}},"30":{"start":{"line":45,"column":12},"end":{"line":50,"column":16}},"31":{"start":{"line":45,"column":67},"end":{"line":50,"column":14}},"32":{"start":{"line":46,"column":16},"end":{"line":46,"column":107}},"33":{"start":{"line":47,"column":16},"end":{"line":47,"column":56}},"34":{"start":{"line":48,"column":16},"end":{"line":48,"column":72}},"35":{"start":{"line":49,"column":16},"end":{"line":49,"column":99}},"36":{"start":{"line":52,"column":8},"end":{"line":59,"column":11}},"37":{"start":{"line":53,"column":12},"end":{"line":58,"column":16}},"38":{"start":{"line":53,"column":90},"end":{"line":58,"column":14}},"39":{"start":{"line":54,"column":16},"end":{"line":54,"column":152}},"40":{"start":{"line":55,"column":16},"end":{"line":55,"column":56}},"41":{"start":{"line":56,"column":16},"end":{"line":56,"column":72}},"42":{"start":{"line":57,"column":16},"end":{"line":57,"column":108}},"43":{"start":{"line":61,"column":4},"end":{"line":84,"column":7}},"44":{"start":{"line":62,"column":8},"end":{"line":75,"column":11}},"45":{"start":{"line":63,"column":12},"end":{"line":68,"column":16}},"46":{"start":{"line":63,"column":58},"end":{"line":68,"column":14}},"47":{"start":{"line":64,"column":16},"end":{"line":64,"column":129}},"48":{"start":{"line":65,"column":16},"end":{"line":65,"column":60}},"49":{"start":{"line":66,"column":16},"end":{"line":66,"column":75}},"50":{"start":{"line":67,"column":16},"end":{"line":67,"column":91}},"51":{"start":{"line":69,"column":12},"end":{"line":74,"column":16}},"52":{"start":{"line":69,"column":67},"end":{"line":74,"column":14}},"53":{"start":{"line":70,"column":16},"end":{"line":70,"column":114}},"54":{"start":{"line":71,"column":16},"end":{"line":71,"column":60}},"55":{"start":{"line":72,"column":16},"end":{"line":72,"column":75}},"56":{"start":{"line":73,"column":16},"end":{"line":73,"column":99}},"57":{"start":{"line":76,"column":8},"end":{"line":83,"column":11}},"58":{"start":{"line":77,"column":12},"end":{"line":82,"column":16}},"59":{"start":{"line":77,"column":90},"end":{"line":82,"column":14}},"60":{"start":{"line":78,"column":16},"end":{"line":78,"column":159}},"61":{"start":{"line":79,"column":16},"end":{"line":79,"column":60}},"62":{"start":{"line":80,"column":16},"end":{"line":80,"column":75}},"63":{"start":{"line":81,"column":16},"end":{"line":81,"column":108}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":39},"end":{"line":15,"column":40}},"loc":{"start":{"line":15,"column":45},"end":{"line":85,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":23},"end":{"line":21,"column":24}},"loc":{"start":{"line":21,"column":29},"end":{"line":36,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":46},"end":{"line":37,"column":47}},"loc":{"start":{"line":37,"column":52},"end":{"line":60,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":44},"end":{"line":38,"column":45}},"loc":{"start":{"line":38,"column":50},"end":{"line":51,"column":9}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":39,"column":52},"end":{"line":39,"column":53}},"loc":{"start":{"line":39,"column":58},"end":{"line":44,"column":14}},"line":39},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":100},"end":{"line":39,"column":101}},"loc":{"start":{"line":39,"column":113},"end":{"line":44,"column":13}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":61},"end":{"line":45,"column":62}},"loc":{"start":{"line":45,"column":67},"end":{"line":50,"column":14}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":109},"end":{"line":45,"column":110}},"loc":{"start":{"line":45,"column":122},"end":{"line":50,"column":13}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":52,"column":45},"end":{"line":52,"column":46}},"loc":{"start":{"line":52,"column":51},"end":{"line":59,"column":9}},"line":52},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":84},"end":{"line":53,"column":85}},"loc":{"start":{"line":53,"column":90},"end":{"line":58,"column":14}},"line":53},"10":{"name":"(anonymous_10)","decl":{"start":{"line":53,"column":132},"end":{"line":53,"column":133}},"loc":{"start":{"line":53,"column":145},"end":{"line":58,"column":13}},"line":53},"11":{"name":"(anonymous_11)","decl":{"start":{"line":61,"column":49},"end":{"line":61,"column":50}},"loc":{"start":{"line":61,"column":55},"end":{"line":84,"column":5}},"line":61},"12":{"name":"(anonymous_12)","decl":{"start":{"line":62,"column":44},"end":{"line":62,"column":45}},"loc":{"start":{"line":62,"column":50},"end":{"line":75,"column":9}},"line":62},"13":{"name":"(anonymous_13)","decl":{"start":{"line":63,"column":52},"end":{"line":63,"column":53}},"loc":{"start":{"line":63,"column":58},"end":{"line":68,"column":14}},"line":63},"14":{"name":"(anonymous_14)","decl":{"start":{"line":63,"column":100},"end":{"line":63,"column":101}},"loc":{"start":{"line":63,"column":113},"end":{"line":68,"column":13}},"line":63},"15":{"name":"(anonymous_15)","decl":{"start":{"line":69,"column":61},"end":{"line":69,"column":62}},"loc":{"start":{"line":69,"column":67},"end":{"line":74,"column":14}},"line":69},"16":{"name":"(anonymous_16)","decl":{"start":{"line":69,"column":109},"end":{"line":69,"column":110}},"loc":{"start":{"line":69,"column":122},"end":{"line":74,"column":13}},"line":69},"17":{"name":"(anonymous_17)","decl":{"start":{"line":76,"column":45},"end":{"line":76,"column":46}},"loc":{"start":{"line":76,"column":51},"end":{"line":83,"column":9}},"line":76},"18":{"name":"(anonymous_18)","decl":{"start":{"line":77,"column":84},"end":{"line":77,"column":85}},"loc":{"start":{"line":77,"column":90},"end":{"line":82,"column":14}},"line":77},"19":{"name":"(anonymous_19)","decl":{"start":{"line":77,"column":132},"end":{"line":77,"column":133}},"loc":{"start":{"line":77,"column":145},"end":{"line":82,"column":13}},"line":77}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":6,"17":6,"18":6,"19":6,"20":6,"21":6,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1},"f":{"0":1,"1":6,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.controller.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport * as httpMocks from 'node-mocks-http';\r\nimport { mock, reset, when, instance } from 'ts-mockito';\r\nimport {\r\n    HttpStatusCode\r\n} from '../utils/utils';\r\n\r\nimport { PasswordService } from '../services/password.service';\r\nimport { PasswordController } from '../controllers/password.controller';\r\nimport { PasswordModel } from '../models/password.model';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\nconst responseMock = httpMocks.createResponse();\r\nconst requestMock = httpMocks.createRequest();\r\n\r\ndescribe('PasswordController', () => {\r\n    const PasswordServiceMock: PasswordService = mock(PasswordService);\r\n    let controller: PasswordController;\r\n    let PasswordModelResult: PasswordModel;\r\n    let PasswordModelRequest: PasswordModel;\r\n    let PasswordModelRequestFull: PasswordModel;\r\n\r\n    beforeEach(() => {\r\n        reset(PasswordServiceMock);\r\n        const PasswordServiceMockInstance: PasswordService = instance(\r\n            PasswordServiceMock\r\n        );\r\n        controller = new PasswordController(PasswordServiceMockInstance);\r\n        PasswordModelRequest = {\r\n            service: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelResult = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelRequestFull = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n    });\r\n\r\n    describe('get Password function', () => {\r\n        describe('service success', () => {\r\n            it('should return HTTP 200 OK', async () => {\r\n                when(\r\n                    PasswordServiceMock.getPassword(PasswordModelRequest)\r\n                ).thenResolve(PasswordModelResult);\r\n                requestMock.body = PasswordModelRequest;\r\n                await controller.getPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.Ok);\r\n            });\r\n\r\n            it('should return HTTP 400 Bad Request', async () => {\r\n                when(\r\n                    PasswordServiceMock.getPassword(PasswordModelRequest)\r\n                ).thenResolve(null);\r\n                requestMock.body = PasswordModelRequest;\r\n                await controller.getPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.BadRequest);\r\n            });\r\n        });\r\n\r\n        describe('service failures', () => {\r\n            it('should return Internal Server Error for a service failure', async () => {\r\n                when(\r\n                    PasswordServiceMock.getPassword(PasswordModelRequest)\r\n                ).thenReturn(Promise.reject(new Error('Internal server error')));\r\n                requestMock.body = PasswordModelRequest;\r\n                await controller.getPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.InternalServerError);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('create Password function', () => {\r\n        describe('service success', () => {\r\n            it('should return HTTP 200 OK', async () => {\r\n                when(\r\n                    PasswordServiceMock.createPassword(PasswordModelRequestFull)\r\n                ).thenResolve(PasswordModelResult);\r\n                requestMock.body = PasswordModelRequestFull;\r\n                await controller.createPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.Ok);\r\n            });\r\n\r\n            it('should return HTTP 400 Bad Request', async () => {\r\n                when(\r\n                    PasswordServiceMock.createPassword(PasswordModelRequestFull)\r\n                ).thenResolve(null);\r\n                requestMock.body = PasswordModelRequestFull;\r\n                await controller.createPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.BadRequest);\r\n            });\r\n        });\r\n\r\n        describe('service failures', () => {\r\n            it('should return Internal Server Error for a service failure', async () => {\r\n                when(\r\n                    PasswordServiceMock.createPassword(PasswordModelRequestFull)\r\n                ).thenReturn(Promise.reject(new Error('Internal server error')));\r\n                requestMock.body = PasswordModelRequestFull;\r\n                await controller.createPassword(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.InternalServerError);\r\n            });\r\n        });\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b1b10ed8f07f799ab6e3f39620b1cf2c607755f7","contentHash":"0d365383ad0be5601eba251b552daa196142827c9e2b8cf500a0c801dd5676fa"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\utils\\utils.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\utils\\utils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":104}},"2":{"start":{"line":4,"column":12},"end":{"line":4,"column":35}},"3":{"start":{"line":6,"column":0},"end":{"line":11,"column":77}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":70}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":88}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":54}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":74}},"8":{"start":{"line":13,"column":0},"end":{"line":16,"column":62}},"9":{"start":{"line":14,"column":4},"end":{"line":14,"column":63}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":44}},"11":{"start":{"line":17,"column":0},"end":{"line":20,"column":2}},"12":{"start":{"line":21,"column":28},"end":{"line":31,"column":1}},"13":{"start":{"line":22,"column":18},"end":{"line":22,"column":148}},"14":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":149}},"16":{"start":{"line":27,"column":4},"end":{"line":30,"column":42}},"17":{"start":{"line":32,"column":0},"end":{"line":32,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":1},"end":{"line":6,"column":2}},"loc":{"start":{"line":6,"column":27},"end":{"line":11,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":1},"end":{"line":13,"column":2}},"loc":{"start":{"line":13,"column":22},"end":{"line":16,"column":1}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":28},"end":{"line":21,"column":29}},"loc":{"start":{"line":21,"column":59},"end":{"line":31,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":20},"end":{"line":11,"column":75}},"type":"binary-expr","locations":[{"start":{"line":11,"column":20},"end":{"line":11,"column":42}},{"start":{"line":11,"column":47},"end":{"line":11,"column":74}}],"line":11},"1":{"loc":{"start":{"line":16,"column":15},"end":{"line":16,"column":60}},"type":"binary-expr","locations":[{"start":{"line":16,"column":15},"end":{"line":16,"column":32}},{"start":{"line":16,"column":37},"end":{"line":16,"column":59}}],"line":16},"2":{"loc":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},{"start":{"line":24,"column":4},"end":{"line":26,"column":5}}],"line":24}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":1},"f":{"0":1,"1":1,"2":0},"b":{"0":[1,1],"1":[1,1],"2":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/utils/utils.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/utils/utils.ts"],"names":[],"mappings":";;;AACA,oCAAoC;AAEpC,IAAY,cAKX;AALD,WAAY,cAAc;IACtB,iEAAgB,CAAA;IAChB,mFAAyB,CAAA;IACzB,iDAAQ,CAAA;IACR,qEAAkB,CAAA;AACtB,CAAC,EALW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAKzB;AAED,IAAY,SAGX;AAHD,WAAY,SAAS;IACjB,0DAA6C,CAAA;IAC7C,uCAA0B,CAAA;AAC9B,CAAC,EAHW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAGpB;AAEY,QAAA,WAAW,GAAc;IAClC,QAAQ,EAAE,OAAO;IACjB,QAAQ,EAAE,QAAQ;CACrB,CAAA;AAEM,MAAM,mBAAmB,GAAQ,CAAC,IAAY,EAAE,QAAgB,EAAE,SAA2B,EAAE,EAAE;IACpG,IAAI,OAAO,GAAG,kIAAkI,CAAC;IAAA,CAAC;IAElJ,IAAI,IAAI,IAAI,eAAe,EAAE;QACzB,OAAO,GAAG,kIAAkI,CAAC;KAChJ;IAED,OAAO,GAAG,CAAC,IAAI,CACX;QACI,QAAQ;QACR,IAAI;KACP,EACD,OAAO,EACP,EAAE,SAAS,EAAE,SAAS,EAAE,CAC3B,CAAC;AACN,CAAC,CAAC;AAfW,QAAA,mBAAmB,uBAe9B","sourcesContent":["import { UserModel } from '../models/user.model';\r\nimport * as jwt from \"jsonwebtoken\";\r\n\r\nexport enum HttpStatusCode {\r\n    BadRequest = 400,\r\n    InternalServerError = 500,\r\n    Ok = 200,\r\n    Unauthorized = 401\r\n}\r\n\r\nexport enum ErrorCode {\r\n    InternalServerError = 'INTERNAL_SERVER_ERROR',\r\n    BadRequest = 'BAD_REQUEST'\r\n}\r\n\r\nexport const DefaultUser: UserModel = {\r\n    username: 'admin',\r\n    password: '123456'\r\n}\r\n\r\nexport const generateAccessToken: any = (type: string, username: string, expiresIn?: string | number) => {\r\n    let hashKey = \"09f26e402586e2faa8da4c98a35f1b20d6b033c6097befa8be3486a829587fe2f90a832bd3ff9d42710a4da095a2ce285b009f0c3730cd9b8e1af3eb84df6611\";;\r\n\r\n    if (type == 'REFRESH_TOKEN') {\r\n        hashKey = \"c6c00fc0855d03c8a4199b498b147dc89492fc250c613a744faf5a330bd61ddc0bfbc8c99639de4c0823b979766006c943bbcad43ba3119e2a5745481dbc6159\";\r\n    }\r\n\r\n    return jwt.sign(\r\n        {\r\n            username,\r\n            type,\r\n        },\r\n        hashKey,\r\n        { expiresIn: expiresIn }\r\n    );\r\n};"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"17d5a36f44c508f366c5c82d22838cc0b84ee035","contentHash":"49da84ce281ba4b29e326b0a4c564354cfb5f704c176321b73b0d89513d97794"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\services\\password.service.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\services\\password.service.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":53}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":53}},"5":{"start":{"line":11,"column":8},"end":{"line":13,"column":11}},"6":{"start":{"line":12,"column":12},"end":{"line":12,"column":70}},"7":{"start":{"line":16,"column":8},"end":{"line":18,"column":11}},"8":{"start":{"line":17,"column":12},"end":{"line":17,"column":73}},"9":{"start":{"line":21,"column":0},"end":{"line":21,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":36},"end":{"line":9,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":31},"end":{"line":14,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":55},"end":{"line":11,"column":56}},"loc":{"start":{"line":11,"column":68},"end":{"line":13,"column":9}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":34},"end":{"line":19,"column":5}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":16,"column":55},"end":{"line":16,"column":56}},"loc":{"start":{"line":16,"column":68},"end":{"line":18,"column":9}},"line":16}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":2,"6":2,"7":0,"8":0,"9":1},"f":{"0":2,"1":2,"2":2,"3":0,"4":0},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/services/password.service.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/services/password.service.ts"],"names":[],"mappings":";;;;AAKA,MAAa,eAAe;IAC1B,YACmB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAEvD,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAEY,WAAW,CACtB,aAA4B;;YAE5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC5D,CAAC;KAAA;IAEY,cAAc,CACzB,aAA4B;;YAC5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC/D,CAAC;KAAA;CACF;AAjBD,0CAiBC","sourcesContent":["import { PasswordRepository } from '../repositories/password.repository';\r\nimport {\r\n  PasswordModel\r\n} from '../models/password.model';\r\n\r\nexport class PasswordService {\r\n  public constructor(\r\n    private readonly passwordRepository: PasswordRepository\r\n  ) {\r\n    this.passwordRepository = passwordRepository;\r\n  }\r\n\r\n  public async getPassword(\r\n    passwordModel: PasswordModel\r\n  ): Promise<PasswordModel> {\r\n    return this.passwordRepository.getPassword(passwordModel);\r\n  }\r\n\r\n  public async createPassword(\r\n    passwordModel: PasswordModel): Promise<PasswordModel> {\r\n    return this.passwordRepository.createPassword(passwordModel);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"95f5f915efed9458c63075e510e9326bf5c1747b","contentHash":"eb1f852209eee20f103d398c46076b201b0a09ea16cc00c913a69cebc9de755c"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\controllers\\password.controller.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\controllers\\password.controller.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":41}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":47}},"5":{"start":{"line":9,"column":8},"end":{"line":23,"column":11}},"6":{"start":{"line":9,"column":41},"end":{"line":23,"column":10}},"7":{"start":{"line":10,"column":12},"end":{"line":22,"column":15}},"8":{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},"9":{"start":{"line":14,"column":20},"end":{"line":14,"column":85}},"10":{"start":{"line":17,"column":20},"end":{"line":17,"column":108}},"11":{"start":{"line":21,"column":16},"end":{"line":21,"column":122}},"12":{"start":{"line":24,"column":8},"end":{"line":38,"column":11}},"13":{"start":{"line":24,"column":44},"end":{"line":38,"column":10}},"14":{"start":{"line":25,"column":12},"end":{"line":37,"column":15}},"15":{"start":{"line":28,"column":16},"end":{"line":33,"column":17}},"16":{"start":{"line":29,"column":20},"end":{"line":29,"column":85}},"17":{"start":{"line":32,"column":20},"end":{"line":32,"column":108}},"18":{"start":{"line":36,"column":16},"end":{"line":36,"column":122}},"19":{"start":{"line":39,"column":8},"end":{"line":39,"column":47}},"20":{"start":{"line":42,"column":0},"end":{"line":42,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":33},"end":{"line":40,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":27},"end":{"line":9,"column":28}},"loc":{"start":{"line":9,"column":41},"end":{"line":23,"column":10}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":81},"end":{"line":9,"column":82}},"loc":{"start":{"line":9,"column":94},"end":{"line":23,"column":9}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":22},"end":{"line":12,"column":23}},"loc":{"start":{"line":12,"column":41},"end":{"line":19,"column":13}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":23},"end":{"line":20,"column":24}},"loc":{"start":{"line":20,"column":29},"end":{"line":22,"column":13}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":30},"end":{"line":24,"column":31}},"loc":{"start":{"line":24,"column":44},"end":{"line":38,"column":10}},"line":24},"6":{"name":"(anonymous_6)","decl":{"start":{"line":24,"column":84},"end":{"line":24,"column":85}},"loc":{"start":{"line":24,"column":97},"end":{"line":38,"column":9}},"line":24},"7":{"name":"(anonymous_7)","decl":{"start":{"line":27,"column":22},"end":{"line":27,"column":23}},"loc":{"start":{"line":27,"column":41},"end":{"line":34,"column":13}},"line":27},"8":{"name":"(anonymous_8)","decl":{"start":{"line":35,"column":23},"end":{"line":35,"column":24}},"loc":{"start":{"line":35,"column":29},"end":{"line":37,"column":13}},"line":35}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},"type":"if","locations":[{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},{"start":{"line":13,"column":16},"end":{"line":18,"column":17}}],"line":13},"1":{"loc":{"start":{"line":28,"column":16},"end":{"line":33,"column":17}},"type":"if","locations":[{"start":{"line":28,"column":16},"end":{"line":33,"column":17}},{"start":{"line":28,"column":16},"end":{"line":33,"column":17}}],"line":28}},"s":{"0":1,"1":1,"2":1,"3":1,"4":6,"5":6,"6":3,"7":3,"8":2,"9":1,"10":1,"11":1,"12":6,"13":3,"14":3,"15":2,"16":1,"17":1,"18":1,"19":6,"20":1},"f":{"0":6,"1":3,"2":3,"3":2,"4":1,"5":3,"6":3,"7":2,"8":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/controllers/password.controller.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/controllers/password.controller.ts"],"names":[],"mappings":";;;;AACA,0CAGwB;AAKxB,MAAa,kBAAkB;IAC7B,YAAoC,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAI7D,gBAAW,GAAG,CAAO,GAAY,EAAE,GAAa,EAAqB,EAAE;YAC5E,OAAO,IAAI,CAAC,eAAe;iBACxB,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC;iBACrB,IAAI,CAAC,CAAC,aAA4B,EAAE,EAAE;gBACrC,IAAI,aAAa,EAAE;oBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC1D;qBACI;oBACH,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;iBACzE;YACH,CAAC,CACA;iBACA,KAAK,CAAC,GAAG,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,mBAAmB,CAAC,CAAC;YAC5F,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QAEK,mBAAc,GAAG,CAAO,GAAY,EAAE,GAAa,EAAqB,EAAE;YAC/E,OAAO,IAAI,CAAC,eAAe;iBACxB,cAAc,CACb,GAAG,CAAC,IAAI,CACT;iBACA,IAAI,CAAC,CAAC,aAA4B,EAAE,EAAE;gBACrC,IAAI,aAAa,EAAE;oBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC1D;qBACI;oBACH,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;iBACzE;YACH,CAAC,CACA;iBACA,KAAK,CAAC,GAAG,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,mBAAmB,CAAC,CAAC;YAC5F,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QArCA,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;CAqCF;AAxCD,gDAwCC","sourcesContent":["import { Request, Response } from 'express';\r\nimport {\r\n  HttpStatusCode,\r\n  ErrorCode\r\n} from '../utils/utils';\r\n\r\nimport { PasswordService } from '../services/password.service';\r\nimport { PasswordModel } from '../models/password.model';\r\n\r\nexport class PasswordController {\r\n  public constructor(private readonly passwordService: PasswordService) {\r\n    this.passwordService = passwordService;\r\n  }\r\n\r\n  public getPassword = async (req: Request, res: Response): Promise<Response> => {\r\n    return this.passwordService\r\n      .getPassword(req.body)\r\n      .then((passwordModel: PasswordModel) => {\r\n        if (passwordModel) {\r\n          return res.status(HttpStatusCode.Ok).json(passwordModel);\r\n        }\r\n        else {\r\n          return res.status(HttpStatusCode.BadRequest).json(ErrorCode.BadRequest);\r\n        }\r\n      }\r\n      )\r\n      .catch(() => {\r\n        return res.status(HttpStatusCode.InternalServerError).json(ErrorCode.InternalServerError);\r\n      });\r\n  };\r\n\r\n  public createPassword = async (req: Request, res: Response): Promise<Response> => {\r\n    return this.passwordService\r\n      .createPassword(\r\n        req.body\r\n      )\r\n      .then((passwordModel: PasswordModel) => {\r\n        if (passwordModel) {\r\n          return res.status(HttpStatusCode.Ok).json(passwordModel);\r\n        }\r\n        else {\r\n          return res.status(HttpStatusCode.BadRequest).json(ErrorCode.BadRequest);\r\n        }\r\n      }\r\n      )\r\n      .catch(() => {\r\n        return res.status(HttpStatusCode.InternalServerError).json(ErrorCode.InternalServerError);\r\n      });\r\n  };\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dd0b84a859494d4c7102d405eac4aadb4fd45bf1","contentHash":"2d50b4b49b44116ecc7ffe72caa4059f0572ff98fe6c55a4522d532a5eea3de7"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.repository.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.repository.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":19},"end":{"line":7,"column":40}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":42}},"7":{"start":{"line":9,"column":30},"end":{"line":9,"column":76}},"8":{"start":{"line":10,"column":15},"end":{"line":10,"column":36}},"9":{"start":{"line":11,"column":23},"end":{"line":14,"column":1}},"10":{"start":{"line":15,"column":31},"end":{"line":19,"column":2}},"11":{"start":{"line":20,"column":0},"end":{"line":97,"column":3}},"12":{"start":{"line":21,"column":35},"end":{"line":21,"column":94}},"13":{"start":{"line":27,"column":4},"end":{"line":44,"column":7}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":51}},"15":{"start":{"line":29,"column":8},"end":{"line":29,"column":69}},"16":{"start":{"line":30,"column":8},"end":{"line":32,"column":10}},"17":{"start":{"line":33,"column":8},"end":{"line":36,"column":10}},"18":{"start":{"line":37,"column":8},"end":{"line":40,"column":10}},"19":{"start":{"line":41,"column":8},"end":{"line":43,"column":10}},"20":{"start":{"line":45,"column":4},"end":{"line":70,"column":7}},"21":{"start":{"line":46,"column":8},"end":{"line":53,"column":12}},"22":{"start":{"line":46,"column":55},"end":{"line":53,"column":10}},"23":{"start":{"line":47,"column":12},"end":{"line":50,"column":14}},"24":{"start":{"line":48,"column":16},"end":{"line":48,"column":23}},"25":{"start":{"line":49,"column":16},"end":{"line":49,"column":60}},"26":{"start":{"line":51,"column":27},"end":{"line":51,"column":77}},"27":{"start":{"line":52,"column":12},"end":{"line":52,"column":96}},"28":{"start":{"line":54,"column":8},"end":{"line":61,"column":12}},"29":{"start":{"line":54,"column":51},"end":{"line":61,"column":10}},"30":{"start":{"line":55,"column":12},"end":{"line":58,"column":14}},"31":{"start":{"line":56,"column":16},"end":{"line":56,"column":23}},"32":{"start":{"line":57,"column":16},"end":{"line":57,"column":45}},"33":{"start":{"line":59,"column":27},"end":{"line":59,"column":77}},"34":{"start":{"line":60,"column":12},"end":{"line":60,"column":81}},"35":{"start":{"line":62,"column":8},"end":{"line":69,"column":12}},"36":{"start":{"line":62,"column":52},"end":{"line":69,"column":10}},"37":{"start":{"line":63,"column":12},"end":{"line":66,"column":14}},"38":{"start":{"line":64,"column":16},"end":{"line":64,"column":23}},"39":{"start":{"line":65,"column":16},"end":{"line":65,"column":52}},"40":{"start":{"line":67,"column":27},"end":{"line":67,"column":77}},"41":{"start":{"line":68,"column":12},"end":{"line":68,"column":88}},"42":{"start":{"line":71,"column":4},"end":{"line":96,"column":7}},"43":{"start":{"line":72,"column":8},"end":{"line":79,"column":12}},"44":{"start":{"line":72,"column":55},"end":{"line":79,"column":10}},"45":{"start":{"line":73,"column":12},"end":{"line":76,"column":14}},"46":{"start":{"line":74,"column":16},"end":{"line":74,"column":23}},"47":{"start":{"line":75,"column":16},"end":{"line":75,"column":60}},"48":{"start":{"line":77,"column":27},"end":{"line":77,"column":84}},"49":{"start":{"line":78,"column":12},"end":{"line":78,"column":96}},"50":{"start":{"line":80,"column":8},"end":{"line":87,"column":12}},"51":{"start":{"line":80,"column":51},"end":{"line":87,"column":10}},"52":{"start":{"line":81,"column":12},"end":{"line":84,"column":14}},"53":{"start":{"line":82,"column":16},"end":{"line":82,"column":23}},"54":{"start":{"line":83,"column":16},"end":{"line":83,"column":45}},"55":{"start":{"line":85,"column":27},"end":{"line":85,"column":84}},"56":{"start":{"line":86,"column":12},"end":{"line":86,"column":81}},"57":{"start":{"line":88,"column":8},"end":{"line":95,"column":12}},"58":{"start":{"line":88,"column":52},"end":{"line":95,"column":10}},"59":{"start":{"line":89,"column":12},"end":{"line":92,"column":14}},"60":{"start":{"line":90,"column":16},"end":{"line":90,"column":23}},"61":{"start":{"line":91,"column":16},"end":{"line":91,"column":52}},"62":{"start":{"line":93,"column":27},"end":{"line":93,"column":84}},"63":{"start":{"line":94,"column":12},"end":{"line":94,"column":88}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":15},"end":{"line":12,"column":16}},"loc":{"start":{"line":12,"column":21},"end":{"line":12,"column":24}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":17},"end":{"line":13,"column":18}},"loc":{"start":{"line":13,"column":23},"end":{"line":13,"column":26}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":40},"end":{"line":20,"column":41}},"loc":{"start":{"line":20,"column":46},"end":{"line":97,"column":1}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":23},"end":{"line":27,"column":24}},"loc":{"start":{"line":27,"column":29},"end":{"line":44,"column":5}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":45,"column":46},"end":{"line":45,"column":47}},"loc":{"start":{"line":45,"column":52},"end":{"line":70,"column":5}},"line":45},"5":{"name":"(anonymous_5)","decl":{"start":{"line":46,"column":45},"end":{"line":46,"column":46}},"loc":{"start":{"line":46,"column":55},"end":{"line":53,"column":10}},"line":46},"6":{"name":"(anonymous_6)","decl":{"start":{"line":46,"column":97},"end":{"line":46,"column":98}},"loc":{"start":{"line":46,"column":110},"end":{"line":53,"column":9}},"line":46},"7":{"name":"(anonymous_7)","decl":{"start":{"line":47,"column":36},"end":{"line":47,"column":37}},"loc":{"start":{"line":47,"column":42},"end":{"line":50,"column":13}},"line":47},"8":{"name":"(anonymous_8)","decl":{"start":{"line":54,"column":41},"end":{"line":54,"column":42}},"loc":{"start":{"line":54,"column":51},"end":{"line":61,"column":10}},"line":54},"9":{"name":"(anonymous_9)","decl":{"start":{"line":54,"column":93},"end":{"line":54,"column":94}},"loc":{"start":{"line":54,"column":106},"end":{"line":61,"column":9}},"line":54},"10":{"name":"(anonymous_10)","decl":{"start":{"line":55,"column":36},"end":{"line":55,"column":37}},"loc":{"start":{"line":55,"column":42},"end":{"line":58,"column":13}},"line":55},"11":{"name":"(anonymous_11)","decl":{"start":{"line":62,"column":42},"end":{"line":62,"column":43}},"loc":{"start":{"line":62,"column":52},"end":{"line":69,"column":10}},"line":62},"12":{"name":"(anonymous_12)","decl":{"start":{"line":62,"column":94},"end":{"line":62,"column":95}},"loc":{"start":{"line":62,"column":107},"end":{"line":69,"column":9}},"line":62},"13":{"name":"(anonymous_13)","decl":{"start":{"line":63,"column":36},"end":{"line":63,"column":37}},"loc":{"start":{"line":63,"column":42},"end":{"line":66,"column":13}},"line":63},"14":{"name":"(anonymous_14)","decl":{"start":{"line":71,"column":49},"end":{"line":71,"column":50}},"loc":{"start":{"line":71,"column":55},"end":{"line":96,"column":5}},"line":71},"15":{"name":"(anonymous_15)","decl":{"start":{"line":72,"column":45},"end":{"line":72,"column":46}},"loc":{"start":{"line":72,"column":55},"end":{"line":79,"column":10}},"line":72},"16":{"name":"(anonymous_16)","decl":{"start":{"line":72,"column":97},"end":{"line":72,"column":98}},"loc":{"start":{"line":72,"column":110},"end":{"line":79,"column":9}},"line":72},"17":{"name":"(anonymous_17)","decl":{"start":{"line":73,"column":36},"end":{"line":73,"column":37}},"loc":{"start":{"line":73,"column":42},"end":{"line":76,"column":13}},"line":73},"18":{"name":"(anonymous_18)","decl":{"start":{"line":80,"column":41},"end":{"line":80,"column":42}},"loc":{"start":{"line":80,"column":51},"end":{"line":87,"column":10}},"line":80},"19":{"name":"(anonymous_19)","decl":{"start":{"line":80,"column":93},"end":{"line":80,"column":94}},"loc":{"start":{"line":80,"column":106},"end":{"line":87,"column":9}},"line":80},"20":{"name":"(anonymous_20)","decl":{"start":{"line":81,"column":36},"end":{"line":81,"column":37}},"loc":{"start":{"line":81,"column":42},"end":{"line":84,"column":13}},"line":81},"21":{"name":"(anonymous_21)","decl":{"start":{"line":88,"column":42},"end":{"line":88,"column":43}},"loc":{"start":{"line":88,"column":52},"end":{"line":95,"column":10}},"line":88},"22":{"name":"(anonymous_22)","decl":{"start":{"line":88,"column":94},"end":{"line":88,"column":95}},"loc":{"start":{"line":88,"column":107},"end":{"line":95,"column":9}},"line":88},"23":{"name":"(anonymous_23)","decl":{"start":{"line":89,"column":36},"end":{"line":89,"column":37}},"loc":{"start":{"line":89,"column":42},"end":{"line":92,"column":13}},"line":89}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":6,"15":6,"16":6,"17":6,"18":6,"19":6,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":0,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":0,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":0,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":0,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":0},"f":{"0":0,"1":0,"2":1,"3":6,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.repository.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.repository.spec.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,+BAA8B;AAC9B,iCAAiD;AACjD,yCAAyC;AACzC,2CAAyC;AAEzC,6EAAyE;AAEzE,MAAM,MAAM,GAAkB,IAAI,eAAM,EAAE,CAAC;AAE3C,MAAM,cAAc,GAAG;IACnB,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAQ,CAAC,EAAE;IAC3B,WAAW,EAAE,GAAG,EAAE,GAAQ,CAAC;CAC9B,CAAA;AAED,MAAM,sBAAsB,GAAG,UAAU,CAAC,qCAAqC,EAAE;IAC7E,aAAa,EAAE;QACX,UAAU,EAAE,cAAc;KAC7B;CACJ,CAAC,CAAC;AAEH,gBAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACjC,MAAM,sBAAsB,GAAuB,iBAAI,CAAC,wCAAkB,CAAC,CAAC;IAC5E,IAAI,UAA8B,CAAC;IACnC,IAAI,mBAAkC,CAAC;IACvC,IAAI,oBAAmC,CAAC;IACxC,IAAI,wBAAuC,CAAC;IAC5C,IAAI,WAAkB,CAAC;IAEvB,kBAAU,CAAC,GAAG,EAAE;QACZ,kBAAK,CAAC,sBAAsB,CAAC,CAAC;QAC9B,UAAU,GAAG,IAAI,sBAAsB,CAAC,kBAAkB,EAAE,CAAC;QAE7D,oBAAoB,GAAG;YACnB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;SACV,CAAC;QAEnB,mBAAmB,GAAG;YAClB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;YACxB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACX,CAAC;QAEnB,wBAAwB,GAAG;YACvB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;YACxB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACX,CAAC;QAEnB,WAAW,GAAG;YACV,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;SAClB,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,gBAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACnC,UAAE,CAAC,wBAAwB,EAAE,CAAO,IAAI,EAAE,EAAE;YACxC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAA2B,EAAE;gBACjD,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAChD,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;YAEjF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACjF,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,oBAAoB,EAAE,CAAO,IAAI,EAAE,EAAE;YACpC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAkB,EAAE;gBACxC,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;YACjF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,qBAAqB,EAAE,CAAO,IAAI,EAAE,EAAE;YACrC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAmC,EAAE;gBACzD,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;YACjF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,gBAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACtC,UAAE,CAAC,wBAAwB,EAAE,CAAO,IAAI,EAAE,EAAE;YACxC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAA2B,EAAE;gBACjD,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAChD,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YAExF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACjF,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,oBAAoB,EAAE,CAAO,IAAI,EAAE,EAAE;YACpC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAkB,EAAE;gBACxC,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACxF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,qBAAqB,EAAE,CAAO,IAAI,EAAE,EAAE;YACrC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAmC,EAAE;gBACzD,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAkB,MAAM,UAAU,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;YACxF,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport * as proxyquire from 'proxyquire';\r\nimport { reset, mock } from 'ts-mockito';\r\nimport { PasswordModel } from '../models/password.model';\r\nimport { PasswordRepository } from '../repositories/password.repository';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\nconst connectionMock = {\r\n    DB: { get: () => { /**/ } },\r\n    _initialize: () => { /**/ }\r\n}\r\n\r\nconst testPasswordRepository = proxyquire('../repositories/password.repository', {\r\n    '../utils/db': {\r\n        Connection: connectionMock\r\n    }\r\n});\r\n\r\ndescribe('Password Repository', () => {\r\n    const passwordRepositoryMock: PasswordRepository = mock(PasswordRepository);\r\n    let repository: PasswordRepository;\r\n    let PasswordModelResult: PasswordModel;\r\n    let PasswordModelRequest: PasswordModel;\r\n    let PasswordModelRequestFull: PasswordModel;\r\n    let ErrorResult: Error;\r\n\r\n    beforeEach(() => {\r\n        reset(passwordRepositoryMock);\r\n        repository = new testPasswordRepository.PasswordRepository();\r\n\r\n        PasswordModelRequest = {\r\n            service: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelResult = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelRequestFull = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n\r\n        ErrorResult = {\r\n            message: chance.string()\r\n        } as Error;\r\n    });\r\n\r\n    describe('get Password function', () => {\r\n        it('should return Password', async (done) => {\r\n            connectionMock.DB.get = (): Promise<PasswordModel> => {\r\n                done();\r\n                return Promise.resolve(PasswordModelResult);\r\n            };\r\n\r\n            const result: PasswordModel = await repository.getPassword(PasswordModelRequest);\r\n\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(PasswordModelResult));\r\n        });\r\n\r\n        it('should return Null', async (done) => {\r\n            connectionMock.DB.get = (): Promise<null> => {\r\n                done();\r\n                return Promise.resolve(null);\r\n            };\r\n\r\n            const result: PasswordModel = await repository.getPassword(PasswordModelRequest);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(null));\r\n        });\r\n\r\n        it('should return Error', async (done) => {\r\n            connectionMock.DB.get = (): Promise<PasswordModel | Error> => {\r\n                done();\r\n                return Promise.resolve(new Error());\r\n            };\r\n\r\n            const result: PasswordModel = await repository.getPassword(PasswordModelRequest);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(ErrorResult));\r\n        });\r\n    });\r\n\r\n    describe('create Password function', () => {\r\n        it('should create Password', async (done) => {\r\n            connectionMock.DB.get = (): Promise<PasswordModel> => {\r\n                done();\r\n                return Promise.resolve(PasswordModelResult);\r\n            };\r\n\r\n            const result: PasswordModel = await repository.createPassword(PasswordModelRequestFull);\r\n\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(PasswordModelResult));\r\n        });\r\n\r\n        it('should return Null', async (done) => {\r\n            connectionMock.DB.get = (): Promise<null> => {\r\n                done();\r\n                return Promise.resolve(null);\r\n            };\r\n\r\n            const result: PasswordModel = await repository.createPassword(PasswordModelRequestFull);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(null));\r\n        });\r\n\r\n        it('should return Error', async (done) => {\r\n            connectionMock.DB.get = (): Promise<PasswordModel | Error> => {\r\n                done();\r\n                return Promise.resolve(new Error());\r\n            };\r\n\r\n            const result: PasswordModel = await repository.createPassword(PasswordModelRequestFull);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(ErrorResult));\r\n        });\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a8542d492ad7ad4939753db2856c7affe0852041","contentHash":"5a082a33ed6e7b48cff1784f8265e83b0f6635f65dc6b8995c2ecd5101ed07fc"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\repositories\\password.repository.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\repositories\\password.repository.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":35}},"4":{"start":{"line":8,"column":8},"end":{"line":26,"column":11}},"5":{"start":{"line":9,"column":24},"end":{"line":24,"column":14}},"6":{"start":{"line":10,"column":16},"end":{"line":23,"column":19}},"7":{"start":{"line":11,"column":20},"end":{"line":22,"column":21}},"8":{"start":{"line":12,"column":24},"end":{"line":15,"column":27}},"9":{"start":{"line":17,"column":25},"end":{"line":22,"column":21}},"10":{"start":{"line":18,"column":24},"end":{"line":18,"column":36}},"11":{"start":{"line":21,"column":24},"end":{"line":21,"column":38}},"12":{"start":{"line":25,"column":12},"end":{"line":25,"column":23}},"13":{"start":{"line":29,"column":8},"end":{"line":45,"column":11}},"14":{"start":{"line":30,"column":24},"end":{"line":43,"column":14}},"15":{"start":{"line":31,"column":16},"end":{"line":42,"column":19}},"16":{"start":{"line":34,"column":20},"end":{"line":41,"column":21}},"17":{"start":{"line":35,"column":24},"end":{"line":35,"column":36}},"18":{"start":{"line":38,"column":24},"end":{"line":40,"column":27}},"19":{"start":{"line":39,"column":28},"end":{"line":39,"column":41}},"20":{"start":{"line":44,"column":12},"end":{"line":44,"column":23}},"21":{"start":{"line":48,"column":0},"end":{"line":48,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":31},"end":{"line":27,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":55},"end":{"line":8,"column":56}},"loc":{"start":{"line":8,"column":68},"end":{"line":26,"column":9}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":42},"end":{"line":9,"column":43}},"loc":{"start":{"line":9,"column":63},"end":{"line":24,"column":13}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":10,"column":125},"end":{"line":10,"column":126}},"loc":{"start":{"line":10,"column":139},"end":{"line":23,"column":17}},"line":10},"4":{"name":"(anonymous_4)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":34},"end":{"line":46,"column":5}},"line":28},"5":{"name":"(anonymous_5)","decl":{"start":{"line":29,"column":55},"end":{"line":29,"column":56}},"loc":{"start":{"line":29,"column":68},"end":{"line":45,"column":9}},"line":29},"6":{"name":"(anonymous_6)","decl":{"start":{"line":30,"column":42},"end":{"line":30,"column":43}},"loc":{"start":{"line":30,"column":63},"end":{"line":43,"column":13}},"line":30},"7":{"name":"(anonymous_7)","decl":{"start":{"line":33,"column":93},"end":{"line":33,"column":94}},"loc":{"start":{"line":33,"column":102},"end":{"line":42,"column":17}},"line":33},"8":{"name":"(anonymous_8)","decl":{"start":{"line":38,"column":61},"end":{"line":38,"column":62}},"loc":{"start":{"line":38,"column":70},"end":{"line":40,"column":25}},"line":38}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":20},"end":{"line":22,"column":21}},"type":"if","locations":[{"start":{"line":11,"column":20},"end":{"line":22,"column":21}},{"start":{"line":11,"column":20},"end":{"line":22,"column":21}}],"line":11},"1":{"loc":{"start":{"line":11,"column":24},"end":{"line":11,"column":58}},"type":"binary-expr","locations":[{"start":{"line":11,"column":24},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":42}},{"start":{"line":11,"column":46},"end":{"line":11,"column":58}}],"line":11},"2":{"loc":{"start":{"line":17,"column":25},"end":{"line":22,"column":21}},"type":"if","locations":[{"start":{"line":17,"column":25},"end":{"line":22,"column":21}},{"start":{"line":17,"column":25},"end":{"line":22,"column":21}}],"line":17},"3":{"loc":{"start":{"line":34,"column":20},"end":{"line":41,"column":21}},"type":"if","locations":[{"start":{"line":34,"column":20},"end":{"line":41,"column":21}},{"start":{"line":34,"column":20},"end":{"line":41,"column":21}}],"line":34}},"s":{"0":2,"1":2,"2":2,"3":2,"4":3,"5":3,"6":3,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":3,"14":3,"15":3,"16":0,"17":0,"18":0,"19":0,"20":0,"21":2},"f":{"0":3,"1":3,"2":3,"3":0,"4":3,"5":3,"6":3,"7":0,"8":0},"b":{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/repositories/password.repository.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/repositories/password.repository.ts"],"names":[],"mappings":";;;;AAAA,oCAAyC;AAKzC,MAAa,kBAAkB;IAEhB,WAAW,CACtB,aAA4B;;YAE5B,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChD,eAAU,CAAC,EAAE,CAAC,GAAG,CAAC,2DAA2D,aAAa,CAAC,OAAO,IAAI,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;oBAC7H,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,QAAQ,EAAE;wBACtC,OAAO,CAAC;4BACN,OAAO,EAAE,GAAG,CAAC,OAAO;4BACpB,QAAQ,EAAE,GAAG,CAAC,QAAQ;yBACN,CAAC,CAAC;qBACrB;yBACI,IAAI,GAAG,EAAE;wBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb;yBACI;wBACH,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;gBACH,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAC;YAEH,OAAO,GAAoB,CAAC;QAC9B,CAAC;KAAA;IAEY,cAAc,CACzB,aAA4B;;YAE5B,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChD,eAAU,CAAC,EAAE,CAAC,GAAG,CAAC;gBACR,aAAa,CAAC,OAAO,OAAO,aAAa,CAAC,QAAQ;iEACD,aAAa,CAAC,OAAO,KAAK,EAAE,CAAC,GAAQ,EAAE,EAAE;oBAClG,IAAI,GAAG,EAAE;wBACP,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb;yBACI;wBACH,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,GAAkB,EAAE,EAAE;4BAC1D,OAAO,CAAC,GAAG,CAAC,CAAC;wBACf,CAAC,CAAC,CAAC;qBACJ;gBACH,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAC;YAEH,OAAO,GAAoB,CAAC;QAC9B,CAAC;KAAA;CACF;AA7CD,gDA6CC","sourcesContent":["import { Connection } from '../utils/db';\r\nimport {\r\n  PasswordModel\r\n} from '../models/password.model';\r\n\r\nexport class PasswordRepository {\r\n\r\n  public async getPassword(\r\n    passwordModel: PasswordModel\r\n  ): Promise<PasswordModel> {\r\n    const res = await new Promise((resolve, reject) => {\r\n      Connection.DB.get(`SELECT service, password FROM services WHERE service = '${passwordModel.service}';`, (err: any, row: any) => {\r\n        if (row && row.service && row.password) {\r\n          resolve({\r\n            service: row.service,\r\n            password: row.password\r\n          } as PasswordModel);\r\n        }\r\n        else if (err) {\r\n          reject(err);\r\n        }\r\n        else {\r\n          resolve(null);\r\n        }\r\n      })\r\n    });\r\n\r\n    return res as PasswordModel;\r\n  }\r\n\r\n  public async createPassword(\r\n    passwordModel: PasswordModel\r\n  ): Promise<PasswordModel> {\r\n    const res = await new Promise((resolve, reject) => {\r\n      Connection.DB.get(`INSERT INTO services(service, password) \r\n      SELECT '${passwordModel.service}', '${passwordModel.password}' \r\n      WHERE NOT EXISTS(SELECT 1 FROM services WHERE service = '${passwordModel.service}');`, (err: any) => {\r\n        if (err) {\r\n          reject(err);\r\n        }\r\n        else {\r\n          this.getPassword(passwordModel).then((res: PasswordModel) => {\r\n            resolve(res);\r\n          });\r\n        }\r\n      })\r\n    });\r\n\r\n    return res as PasswordModel;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dc570b50c8cd74160044fa619e1a122e73954a29","contentHash":"ce0f06e2ede48b821cfff180dd4896e8632d3e5711a7bc9f639c1a6067c16be1"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\utils\\db.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\utils\\db.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":36}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":35}},"5":{"start":{"line":9,"column":8},"end":{"line":15,"column":11}},"6":{"start":{"line":10,"column":12},"end":{"line":10,"column":106}},"7":{"start":{"line":11,"column":12},"end":{"line":11,"column":108}},"8":{"start":{"line":12,"column":12},"end":{"line":14,"column":166}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":32}},"10":{"start":{"line":19,"column":0},"end":{"line":19,"column":49}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":25},"end":{"line":16,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":26},"end":{"line":9,"column":27}},"loc":{"start":{"line":9,"column":32},"end":{"line":15,"column":9}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":1,"1":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/utils/db.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/utils/db.ts"],"names":[],"mappings":";;;AAAA,qCAAkC;AAClC,mCAAsC;AAEtC,MAAM,OAAO,GAAG,iBAAO,EAAE,CAAC;AAE1B,MAAa,UAAU;IAGZ,MAAM,CAAC,WAAW;QACrB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;YACnB,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAC;YAE9F,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,kFAAkF,CAAC,CAAC;YAEhG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC;;kFAE0D,mBAAW,CAAC,QAAQ,qBAAqB,mBAAW,CAAC,QAAQ,KAAK,CAAC,CAAC;QAC9I,CAAC,CAAC,CAAC;IACP,CAAC;;AAbL,gCAcC;AAbiB,aAAE,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { verbose } from 'sqlite3';\r\nimport { DefaultUser } from './utils';\r\n\r\nconst sqlite3 = verbose();\r\n\r\nexport class Connection {\r\n    public static DB = new sqlite3.Database(':memory:');\r\n\r\n    public static _initialize(): void {\r\n        this.DB.serialize(() => {\r\n            this.DB.run(\"CREATE TABLE IF NOT EXISTS users (username VARCHAR(50), password VARCHAR(50));\");\r\n\r\n            this.DB.run(`CREATE TABLE IF NOT EXISTS services (service VARCHAR(50), password VARCHAR(50));`);\r\n\r\n            this.DB.run(`INSERT INTO users(username,password) \r\n                         SELECT 'admin','123456' \r\n                         WHERE NOT EXISTS(SELECT 1 FROM users WHERE username = '${DefaultUser.username}' AND password = '${DefaultUser.password}');`);\r\n        });\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6fcc7d7d138360b011435908928490baa49aad07","contentHash":"961175716cf71fdbebcbdab78b21a7e5ea32db122cc06ed28132f6efaa8d5ac5"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.service.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\password.service.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":42}},"6":{"start":{"line":8,"column":30},"end":{"line":8,"column":76}},"7":{"start":{"line":9,"column":27},"end":{"line":9,"column":66}},"8":{"start":{"line":10,"column":15},"end":{"line":10,"column":36}},"9":{"start":{"line":11,"column":0},"end":{"line":43,"column":3}},"10":{"start":{"line":12,"column":35},"end":{"line":12,"column":94}},"11":{"start":{"line":13,"column":43},"end":{"line":13,"column":88}},"12":{"start":{"line":18,"column":4},"end":{"line":32,"column":7}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":51}},"14":{"start":{"line":20,"column":8},"end":{"line":20,"column":89}},"15":{"start":{"line":21,"column":8},"end":{"line":23,"column":10}},"16":{"start":{"line":24,"column":8},"end":{"line":27,"column":10}},"17":{"start":{"line":28,"column":8},"end":{"line":31,"column":10}},"18":{"start":{"line":33,"column":4},"end":{"line":37,"column":8}},"19":{"start":{"line":33,"column":47},"end":{"line":37,"column":6}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":133}},"21":{"start":{"line":35,"column":23},"end":{"line":35,"column":70}},"22":{"start":{"line":36,"column":8},"end":{"line":36,"column":60}},"23":{"start":{"line":38,"column":4},"end":{"line":42,"column":8}},"24":{"start":{"line":38,"column":47},"end":{"line":42,"column":6}},"25":{"start":{"line":39,"column":8},"end":{"line":39,"column":137}},"26":{"start":{"line":40,"column":23},"end":{"line":40,"column":74}},"27":{"start":{"line":41,"column":8},"end":{"line":41,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":36},"end":{"line":11,"column":37}},"loc":{"start":{"line":11,"column":42},"end":{"line":43,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":23},"end":{"line":18,"column":24}},"loc":{"start":{"line":18,"column":29},"end":{"line":32,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":41},"end":{"line":33,"column":42}},"loc":{"start":{"line":33,"column":47},"end":{"line":37,"column":6}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":89},"end":{"line":33,"column":90}},"loc":{"start":{"line":33,"column":102},"end":{"line":37,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":41},"end":{"line":38,"column":42}},"loc":{"start":{"line":38,"column":47},"end":{"line":42,"column":6}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":89},"end":{"line":38,"column":90}},"loc":{"start":{"line":38,"column":102},"end":{"line":42,"column":5}},"line":38}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":2,"14":2,"15":2,"16":2,"17":2,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"f":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.service.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/password.service.spec.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,+BAA8B;AAC9B,iCAAiD;AACjD,2CAAyD;AACzD,6EAAyE;AAEzE,mEAA+D;AAE/D,MAAM,MAAM,GAAkB,IAAI,eAAM,EAAE,CAAC;AAE3C,gBAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC7B,MAAM,sBAAsB,GAAuB,iBAAI,CAAC,wCAAkB,CAAC,CAAC;IAC5E,MAAM,8BAA8B,GAAuB,qBAAQ,CAAC,sBAAsB,CAAC,CAAC;IAC5F,IAAI,OAAwB,CAAC;IAC7B,IAAI,mBAAkC,CAAC;IACvC,IAAI,oBAAmC,CAAC;IACxC,IAAI,wBAAuC,CAAC;IAE5C,kBAAU,CAAC,GAAG,EAAE;QACZ,kBAAK,CAAC,sBAAsB,CAAC,CAAC;QAC9B,OAAO,GAAG,IAAI,kCAAe,CAAC,8BAA8B,CAAC,CAAC;QAC9D,oBAAoB,GAAG;YACnB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;SACV,CAAC;QAEnB,mBAAmB,GAAG;YAClB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;YACxB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACX,CAAC;QAEnB,wBAAwB,GAAG;YACvB,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;YACxB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACX,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,UAAE,CAAC,wBAAwB,EAAE,GAAS,EAAE;QACpC,iBAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC,UAAU,CACrE,OAAO,CAAC,OAAO,CAAgB,mBAAmB,CAAC,CACtD,CAAC;QACF,MAAM,MAAM,GAAkB,MAAM,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;QAC9E,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACjD,CAAC,CAAA,CAAC,CAAC;IAEH,UAAE,CAAC,wBAAwB,EAAE,GAAS,EAAE;QACpC,iBAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAAC,UAAU,CACzE,OAAO,CAAC,OAAO,CAAgB,mBAAmB,CAAC,CACtD,CAAC;QACF,MAAM,MAAM,GAAkB,MAAM,OAAO,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;QAClF,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACjD,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport { instance, mock, reset, when } from 'ts-mockito';\r\nimport { PasswordRepository } from '../repositories/password.repository';\r\nimport { PasswordModel } from '../models/password.model';\r\nimport { PasswordService } from '../services/password.service';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\ndescribe('PasswordService', () => {\r\n    const passwordRepositoryMock: PasswordRepository = mock(PasswordRepository);\r\n    const passwordRepositoryMockInstance: PasswordRepository = instance(passwordRepositoryMock);\r\n    let service: PasswordService;\r\n    let PasswordModelResult: PasswordModel;\r\n    let PasswordModelRequest: PasswordModel;\r\n    let PasswordModelRequestFull: PasswordModel;\r\n\r\n    beforeEach(() => {\r\n        reset(passwordRepositoryMock);\r\n        service = new PasswordService(passwordRepositoryMockInstance);\r\n        PasswordModelRequest = {\r\n            service: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelResult = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n\r\n        PasswordModelRequestFull = {\r\n            service: chance.string(),\r\n            password: chance.string()\r\n        } as PasswordModel;\r\n    });\r\n\r\n    it('should return Password', async () => {\r\n        when(passwordRepositoryMock.getPassword(PasswordModelRequest)).thenReturn(\r\n            Promise.resolve<PasswordModel>(PasswordModelResult)\r\n        );\r\n        const result: PasswordModel = await service.getPassword(PasswordModelRequest);\r\n        expect(result).to.equal(PasswordModelResult);\r\n    });\r\n\r\n    it('should create Password', async () => {\r\n        when(passwordRepositoryMock.getPassword(PasswordModelRequestFull)).thenReturn(\r\n            Promise.resolve<PasswordModel>(PasswordModelResult)\r\n        );\r\n        const result: PasswordModel = await service.getPassword(PasswordModelRequestFull);\r\n        expect(result).to.equal(PasswordModelResult);\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7a1dbc83ac88b7e43636098ac4bb59177c2ad012","contentHash":"33960da5f41ca5d9b44c0aaf6de097656a554a6402d23b361c167cb561e1ff1a"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.controller.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.controller.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":18},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":42}},"7":{"start":{"line":9,"column":16},"end":{"line":9,"column":41}},"8":{"start":{"line":10,"column":23},"end":{"line":10,"column":58}},"9":{"start":{"line":11,"column":26},"end":{"line":11,"column":67}},"10":{"start":{"line":12,"column":15},"end":{"line":12,"column":36}},"11":{"start":{"line":13,"column":21},"end":{"line":13,"column":47}},"12":{"start":{"line":14,"column":20},"end":{"line":14,"column":45}},"13":{"start":{"line":15,"column":0},"end":{"line":58,"column":3}},"14":{"start":{"line":16,"column":28},"end":{"line":16,"column":73}},"15":{"start":{"line":21,"column":4},"end":{"line":33,"column":7}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":44}},"17":{"start":{"line":23,"column":40},"end":{"line":23,"column":78}},"18":{"start":{"line":24,"column":8},"end":{"line":24,"column":83}},"19":{"start":{"line":25,"column":8},"end":{"line":28,"column":10}},"20":{"start":{"line":29,"column":8},"end":{"line":32,"column":10}},"21":{"start":{"line":34,"column":4},"end":{"line":57,"column":7}},"22":{"start":{"line":35,"column":8},"end":{"line":48,"column":11}},"23":{"start":{"line":36,"column":12},"end":{"line":41,"column":16}},"24":{"start":{"line":36,"column":58},"end":{"line":41,"column":14}},"25":{"start":{"line":37,"column":16},"end":{"line":37,"column":110}},"26":{"start":{"line":38,"column":16},"end":{"line":38,"column":50}},"27":{"start":{"line":39,"column":16},"end":{"line":39,"column":66}},"28":{"start":{"line":40,"column":16},"end":{"line":40,"column":91}},"29":{"start":{"line":42,"column":12},"end":{"line":47,"column":16}},"30":{"start":{"line":42,"column":67},"end":{"line":47,"column":14}},"31":{"start":{"line":43,"column":16},"end":{"line":43,"column":112}},"32":{"start":{"line":44,"column":16},"end":{"line":44,"column":50}},"33":{"start":{"line":45,"column":16},"end":{"line":45,"column":66}},"34":{"start":{"line":46,"column":16},"end":{"line":46,"column":99}},"35":{"start":{"line":49,"column":8},"end":{"line":56,"column":11}},"36":{"start":{"line":50,"column":12},"end":{"line":55,"column":16}},"37":{"start":{"line":50,"column":90},"end":{"line":55,"column":14}},"38":{"start":{"line":51,"column":16},"end":{"line":51,"column":136}},"39":{"start":{"line":52,"column":16},"end":{"line":52,"column":50}},"40":{"start":{"line":53,"column":16},"end":{"line":53,"column":66}},"41":{"start":{"line":54,"column":16},"end":{"line":54,"column":108}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":35},"end":{"line":15,"column":36}},"loc":{"start":{"line":15,"column":41},"end":{"line":58,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":23},"end":{"line":21,"column":24}},"loc":{"start":{"line":21,"column":29},"end":{"line":33,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":39},"end":{"line":34,"column":40}},"loc":{"start":{"line":34,"column":45},"end":{"line":57,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":44},"end":{"line":35,"column":45}},"loc":{"start":{"line":35,"column":50},"end":{"line":48,"column":9}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":52},"end":{"line":36,"column":53}},"loc":{"start":{"line":36,"column":58},"end":{"line":41,"column":14}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":100},"end":{"line":36,"column":101}},"loc":{"start":{"line":36,"column":113},"end":{"line":41,"column":13}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":61},"end":{"line":42,"column":62}},"loc":{"start":{"line":42,"column":67},"end":{"line":47,"column":14}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":109},"end":{"line":42,"column":110}},"loc":{"start":{"line":42,"column":122},"end":{"line":47,"column":13}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":49,"column":45},"end":{"line":49,"column":46}},"loc":{"start":{"line":49,"column":51},"end":{"line":56,"column":9}},"line":49},"9":{"name":"(anonymous_9)","decl":{"start":{"line":50,"column":84},"end":{"line":50,"column":85}},"loc":{"start":{"line":50,"column":90},"end":{"line":55,"column":14}},"line":50},"10":{"name":"(anonymous_10)","decl":{"start":{"line":50,"column":132},"end":{"line":50,"column":133}},"loc":{"start":{"line":50,"column":145},"end":{"line":55,"column":13}},"line":50}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":3,"17":3,"18":3,"19":3,"20":3,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1},"f":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.controller.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.controller.spec.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,+BAA8B;AAC9B,iCAAiD;AACjD,6CAA6C;AAC7C,2CAAyD;AACzD,0CAEwB;AAIxB,2DAAuD;AACvD,oEAAgE;AAEhE,MAAM,MAAM,GAAkB,IAAI,eAAM,EAAE,CAAC;AAC3C,MAAM,YAAY,GAAG,SAAS,CAAC,cAAc,EAAE,CAAC;AAChD,MAAM,WAAW,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;AAE9C,gBAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC5B,MAAM,eAAe,GAAgB,iBAAI,CAAC,0BAAW,CAAC,CAAC;IACvD,IAAI,UAA0B,CAAC;IAC/B,IAAI,uBAAmC,CAAC;IACxC,IAAI,yBAAqC,CAAC;IAC1C,IAAI,cAAyB,CAAC;IAE9B,kBAAU,CAAC,GAAG,EAAE;QACZ,kBAAK,CAAC,eAAe,CAAC,CAAC;QACvB,MAAM,uBAAuB,GAAgB,qBAAQ,CACjD,eAAe,CAClB,CAAC;QACF,UAAU,GAAG,IAAI,gCAAc,CAAC,uBAAuB,CAAC,CAAC;QACzD,cAAc,GAAG;YACb,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;YACzB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACf,CAAC;QAEf,uBAAuB,GAAG;YACtB,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE;YAC7B,aAAa,EAAE,MAAM,CAAC,MAAM,EAAE;SACnB,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,gBAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC5B,gBAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC7B,UAAE,CAAC,2BAA2B,EAAE,GAAS,EAAE;gBACvC,iBAAI,CACA,eAAe,CAAC,KAAK,CAAC,cAAc,CAAC,CACxC,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;gBACvC,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;gBAClC,MAAM,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAClD,aAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAc,CAAC,EAAE,CAAC,CAAC;YAChE,CAAC,CAAA,CAAC,CAAC;YAEH,UAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;gBAChD,iBAAI,CACA,eAAe,CAAC,KAAK,CAAC,cAAc,CAAC,CACxC,CAAC,WAAW,CAAC,yBAAyB,CAAC,CAAC;gBACzC,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;gBAClC,MAAM,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAClD,aAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAc,CAAC,UAAU,CAAC,CAAC;YACxE,CAAC,CAAA,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,gBAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC9B,UAAE,CAAC,2DAA2D,EAAE,GAAS,EAAE;gBACvE,iBAAI,CACA,eAAe,CAAC,KAAK,CAAC,cAAc,CAAC,CACxC,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;gBACjE,WAAW,CAAC,IAAI,GAAG,cAAc,CAAC;gBAClC,MAAM,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAClD,aAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,sBAAc,CAAC,mBAAmB,CAAC,CAAC;YACjF,CAAC,CAAA,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport * as httpMocks from 'node-mocks-http';\r\nimport { mock, reset, when, instance } from 'ts-mockito';\r\nimport {\r\n    HttpStatusCode\r\n} from '../utils/utils';\r\n\r\nimport { UserModel } from '../models/user.model';\r\nimport { TokenModel } from '../models/token.model';\r\nimport { UserService } from '../services/user.service';\r\nimport { UserController } from '../controllers/user.controller';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\nconst responseMock = httpMocks.createResponse();\r\nconst requestMock = httpMocks.createRequest();\r\n\r\ndescribe('UserController', () => {\r\n    const UserServiceMock: UserService = mock(UserService);\r\n    let controller: UserController;\r\n    let CorrectTokenModelResult: TokenModel;\r\n    let InCorrectTokenModelResult: TokenModel;\r\n    let UserModelParam: UserModel;\r\n\r\n    beforeEach(() => {\r\n        reset(UserServiceMock);\r\n        const UserServiceMockInstance: UserService = instance(\r\n            UserServiceMock\r\n        );\r\n        controller = new UserController(UserServiceMockInstance);\r\n        UserModelParam = {\r\n            username: chance.string(),\r\n            password: chance.string()\r\n        } as UserModel;\r\n\r\n        CorrectTokenModelResult = {\r\n            access_token: chance.string(),\r\n            refresh_token: chance.string()\r\n        } as TokenModel;\r\n    });\r\n\r\n    describe('login function', () => {\r\n        describe('service success', () => {\r\n            it('should return HTTP 200 OK', async () => {\r\n                when(\r\n                    UserServiceMock.login(UserModelParam)\r\n                ).thenResolve(CorrectTokenModelResult);\r\n                requestMock.body = UserModelParam;\r\n                await controller.login(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.Ok);\r\n            });\r\n\r\n            it('should return HTTP 400 Bad Request', async () => {\r\n                when(\r\n                    UserServiceMock.login(UserModelParam)\r\n                ).thenResolve(InCorrectTokenModelResult);\r\n                requestMock.body = UserModelParam;\r\n                await controller.login(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.BadRequest);\r\n            });\r\n        });\r\n\r\n        describe('service failures', () => {\r\n            it('should return Internal Server Error for a service failure', async () => {\r\n                when(\r\n                    UserServiceMock.login(UserModelParam)\r\n                ).thenReturn(Promise.reject(new Error('Internal server error')));\r\n                requestMock.body = UserModelParam;\r\n                await controller.login(requestMock, responseMock);\r\n                expect(responseMock.statusCode).to.equal(HttpStatusCode.InternalServerError);\r\n            });\r\n        });\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b46be623238bd645a0b8d8cb46c69a9f8c90d11c","contentHash":"7fe2fcec1f6b5515b41c77a7110279ef06f14e4cc9c306e2c2ff664ad807a5c5"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\services\\user.service.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\services\\user.service.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":45}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":45}},"5":{"start":{"line":11,"column":8},"end":{"line":13,"column":11}},"6":{"start":{"line":12,"column":12},"end":{"line":12,"column":56}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":32},"end":{"line":9,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":21},"end":{"line":14,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":55},"end":{"line":11,"column":56}},"loc":{"start":{"line":11,"column":68},"end":{"line":13,"column":9}},"line":11}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"f":{"0":1,"1":1,"2":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/services/user.service.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/services/user.service.ts"],"names":[],"mappings":";;;;AAMA,MAAa,WAAW;IACtB,YACmB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAE/C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEY,KAAK,CAChB,SAAoB;;YAEpB,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC;KAAA;CACF;AAZD,kCAYC","sourcesContent":["import { UserRepository } from '../repositories/user.repository';\r\nimport {\r\n  TokenModel\r\n} from '../models/token.model';\r\nimport { UserModel } from '../models/user.model';\r\n\r\nexport class UserService {\r\n  public constructor(\r\n    private readonly userRepository: UserRepository\r\n  ) {\r\n    this.userRepository = userRepository;\r\n  }\r\n\r\n  public async login(\r\n    userModel: UserModel\r\n  ): Promise<TokenModel> {\r\n    return this.userRepository.login(userModel);\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b482cdf5cfb797ca335334ea8b8b45c306b6b5f5","contentHash":"3d03443187da7e131fb5138b7d66d38e9a1772ee5f92f33f3063678b1c9797bb"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\controllers\\user.controller.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\controllers\\user.controller.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":41}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":39}},"5":{"start":{"line":9,"column":8},"end":{"line":23,"column":11}},"6":{"start":{"line":9,"column":35},"end":{"line":23,"column":10}},"7":{"start":{"line":10,"column":12},"end":{"line":22,"column":15}},"8":{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},"9":{"start":{"line":14,"column":20},"end":{"line":14,"column":82}},"10":{"start":{"line":17,"column":20},"end":{"line":17,"column":108}},"11":{"start":{"line":21,"column":16},"end":{"line":21,"column":122}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":39}},"13":{"start":{"line":27,"column":0},"end":{"line":27,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":29},"end":{"line":25,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":21},"end":{"line":9,"column":22}},"loc":{"start":{"line":9,"column":35},"end":{"line":23,"column":10}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":75},"end":{"line":9,"column":76}},"loc":{"start":{"line":9,"column":88},"end":{"line":23,"column":9}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":22},"end":{"line":12,"column":23}},"loc":{"start":{"line":12,"column":38},"end":{"line":19,"column":13}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":23},"end":{"line":20,"column":24}},"loc":{"start":{"line":20,"column":29},"end":{"line":22,"column":13}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},"type":"if","locations":[{"start":{"line":13,"column":16},"end":{"line":18,"column":17}},{"start":{"line":13,"column":16},"end":{"line":18,"column":17}}],"line":13}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":3,"6":3,"7":3,"8":2,"9":1,"10":1,"11":1,"12":3,"13":1},"f":{"0":3,"1":3,"2":3,"3":2,"4":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/controllers/user.controller.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/controllers/user.controller.ts"],"names":[],"mappings":";;;;AACA,0CAGwB;AAKxB,MAAa,cAAc;IACzB,YAAoC,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAIrD,UAAK,GAAG,CAAO,GAAY,EAAE,GAAa,EAAqB,EAAE;YACtE,OAAO,IAAI,CAAC,WAAW;iBACpB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;iBACf,IAAI,CAAC,CAAC,UAAsB,EAAE,EAAE;gBAC/B,IAAI,UAAU,EAAE;oBACd,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBACvD;qBACI;oBACH,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;iBACzE;YACH,CAAC,CACA;iBACA,KAAK,CAAC,GAAG,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,sBAAc,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,iBAAS,CAAC,mBAAmB,CAAC,CAAC;YAC5F,CAAC,CAAC,CAAC;QACP,CAAC,CAAA,CAAC;QAlBA,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CAkBF;AArBD,wCAqBC","sourcesContent":["import { Request, Response } from 'express';\r\nimport {\r\n  HttpStatusCode,\r\n  ErrorCode\r\n} from '../utils/utils';\r\n\r\nimport { UserService } from '../services/user.service';\r\nimport { TokenModel } from '../models/token.model';\r\n\r\nexport class UserController {\r\n  public constructor(private readonly userService: UserService) {\r\n    this.userService = userService;\r\n  }\r\n\r\n  public login = async (req: Request, res: Response): Promise<Response> => {\r\n    return this.userService\r\n      .login(req.body)\r\n      .then((tokenModel: TokenModel) => {\r\n        if (tokenModel) {\r\n          return res.status(HttpStatusCode.Ok).json(tokenModel);\r\n        }\r\n        else {\r\n          return res.status(HttpStatusCode.BadRequest).json(ErrorCode.BadRequest);\r\n        }\r\n      }\r\n      )\r\n      .catch(() => {\r\n        return res.status(HttpStatusCode.InternalServerError).json(ErrorCode.InternalServerError);\r\n      });\r\n  };\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"10d59c6f5ebeecadf878376a4879a6e0665f8705","contentHash":"4b67095a8fc1627a127bcd193cf8d6f38a187a13909940225d36738c37296d3a"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.repository.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.repository.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":19},"end":{"line":7,"column":40}},"6":{"start":{"line":8,"column":21},"end":{"line":8,"column":42}},"7":{"start":{"line":9,"column":26},"end":{"line":9,"column":68}},"8":{"start":{"line":10,"column":15},"end":{"line":10,"column":36}},"9":{"start":{"line":11,"column":23},"end":{"line":14,"column":1}},"10":{"start":{"line":15,"column":30},"end":{"line":15,"column":39}},"11":{"start":{"line":16,"column":27},"end":{"line":23,"column":2}},"12":{"start":{"line":24,"column":0},"end":{"line":72,"column":3}},"13":{"start":{"line":25,"column":31},"end":{"line":25,"column":82}},"14":{"start":{"line":30,"column":4},"end":{"line":44,"column":7}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":47}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":61}},"17":{"start":{"line":33,"column":8},"end":{"line":36,"column":10}},"18":{"start":{"line":37,"column":8},"end":{"line":40,"column":10}},"19":{"start":{"line":41,"column":8},"end":{"line":43,"column":10}},"20":{"start":{"line":45,"column":4},"end":{"line":71,"column":7}},"21":{"start":{"line":46,"column":8},"end":{"line":54,"column":12}},"22":{"start":{"line":46,"column":59},"end":{"line":54,"column":10}},"23":{"start":{"line":47,"column":12},"end":{"line":50,"column":14}},"24":{"start":{"line":48,"column":16},"end":{"line":48,"column":23}},"25":{"start":{"line":49,"column":16},"end":{"line":49,"column":64}},"26":{"start":{"line":51,"column":12},"end":{"line":51,"column":72}},"27":{"start":{"line":51,"column":46},"end":{"line":51,"column":69}},"28":{"start":{"line":52,"column":27},"end":{"line":52,"column":65}},"29":{"start":{"line":53,"column":12},"end":{"line":53,"column":100}},"30":{"start":{"line":55,"column":8},"end":{"line":62,"column":12}},"31":{"start":{"line":55,"column":51},"end":{"line":62,"column":10}},"32":{"start":{"line":56,"column":12},"end":{"line":59,"column":14}},"33":{"start":{"line":57,"column":16},"end":{"line":57,"column":23}},"34":{"start":{"line":58,"column":16},"end":{"line":58,"column":45}},"35":{"start":{"line":60,"column":27},"end":{"line":60,"column":65}},"36":{"start":{"line":61,"column":12},"end":{"line":61,"column":81}},"37":{"start":{"line":63,"column":8},"end":{"line":70,"column":12}},"38":{"start":{"line":63,"column":52},"end":{"line":70,"column":10}},"39":{"start":{"line":64,"column":12},"end":{"line":67,"column":14}},"40":{"start":{"line":65,"column":16},"end":{"line":65,"column":23}},"41":{"start":{"line":66,"column":16},"end":{"line":66,"column":52}},"42":{"start":{"line":68,"column":27},"end":{"line":68,"column":65}},"43":{"start":{"line":69,"column":12},"end":{"line":69,"column":88}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":15},"end":{"line":12,"column":16}},"loc":{"start":{"line":12,"column":21},"end":{"line":12,"column":24}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":17},"end":{"line":13,"column":18}},"loc":{"start":{"line":13,"column":23},"end":{"line":13,"column":26}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":30},"end":{"line":15,"column":31}},"loc":{"start":{"line":15,"column":36},"end":{"line":15,"column":39}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":36},"end":{"line":24,"column":37}},"loc":{"start":{"line":24,"column":42},"end":{"line":72,"column":1}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":23},"end":{"line":30,"column":24}},"loc":{"start":{"line":30,"column":29},"end":{"line":44,"column":5}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":45,"column":39},"end":{"line":45,"column":40}},"loc":{"start":{"line":45,"column":45},"end":{"line":71,"column":5}},"line":45},"6":{"name":"(anonymous_6)","decl":{"start":{"line":46,"column":49},"end":{"line":46,"column":50}},"loc":{"start":{"line":46,"column":59},"end":{"line":54,"column":10}},"line":46},"7":{"name":"(anonymous_7)","decl":{"start":{"line":46,"column":101},"end":{"line":46,"column":102}},"loc":{"start":{"line":46,"column":114},"end":{"line":54,"column":9}},"line":46},"8":{"name":"(anonymous_8)","decl":{"start":{"line":47,"column":36},"end":{"line":47,"column":37}},"loc":{"start":{"line":47,"column":42},"end":{"line":50,"column":13}},"line":47},"9":{"name":"(anonymous_9)","decl":{"start":{"line":51,"column":38},"end":{"line":51,"column":39}},"loc":{"start":{"line":51,"column":44},"end":{"line":51,"column":71}},"line":51},"10":{"name":"(anonymous_10)","decl":{"start":{"line":55,"column":41},"end":{"line":55,"column":42}},"loc":{"start":{"line":55,"column":51},"end":{"line":62,"column":10}},"line":55},"11":{"name":"(anonymous_11)","decl":{"start":{"line":55,"column":93},"end":{"line":55,"column":94}},"loc":{"start":{"line":55,"column":106},"end":{"line":62,"column":9}},"line":55},"12":{"name":"(anonymous_12)","decl":{"start":{"line":56,"column":36},"end":{"line":56,"column":37}},"loc":{"start":{"line":56,"column":42},"end":{"line":59,"column":13}},"line":56},"13":{"name":"(anonymous_13)","decl":{"start":{"line":63,"column":42},"end":{"line":63,"column":43}},"loc":{"start":{"line":63,"column":52},"end":{"line":70,"column":10}},"line":63},"14":{"name":"(anonymous_14)","decl":{"start":{"line":63,"column":94},"end":{"line":63,"column":95}},"loc":{"start":{"line":63,"column":107},"end":{"line":70,"column":9}},"line":63},"15":{"name":"(anonymous_15)","decl":{"start":{"line":64,"column":36},"end":{"line":64,"column":37}},"loc":{"start":{"line":64,"column":42},"end":{"line":67,"column":13}},"line":64}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":3,"16":3,"17":3,"18":3,"19":3,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":1,"29":0,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":0,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":0},"f":{"0":0,"1":1,"2":0,"3":1,"4":3,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.repository.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.repository.spec.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,+BAA8B;AAC9B,iCAAiD;AACjD,yCAAyC;AACzC,2CAAyC;AACzC,qEAAiE;AAIjE,MAAM,MAAM,GAAkB,IAAI,eAAM,EAAE,CAAC;AAE3C,MAAM,cAAc,GAAG;IACnB,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAQ,CAAC,EAAE;IAC3B,WAAW,EAAE,GAAG,EAAE,GAAQ,CAAC;CAC9B,CAAA;AAED,IAAI,uBAAuB,GAAG,GAAG,EAAE,GAAQ,CAAC,CAAA;AAE5C,MAAM,kBAAkB,GAAG,UAAU,CAAC,iCAAiC,EAAE;IACrE,aAAa,EAAE;QACX,UAAU,EAAE,cAAc;KAC7B;IACD,gBAAgB,EAAE;QACd,mBAAmB,EAAE,uBAAuB;KAC/C;CACJ,CAAC,CAAC;AAEH,gBAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC7B,MAAM,kBAAkB,GAAmB,iBAAI,CAAC,gCAAc,CAAC,CAAC;IAChE,IAAI,UAA0B,CAAC;IAC/B,IAAI,uBAAmC,CAAC;IACxC,IAAI,cAAyB,CAAC;IAC9B,IAAI,WAAkB,CAAC;IAEvB,kBAAU,CAAC,GAAG,EAAE;QACZ,kBAAK,CAAC,kBAAkB,CAAC,CAAC;QAC1B,UAAU,GAAG,IAAI,kBAAkB,CAAC,cAAc,EAAE,CAAC;QAErD,cAAc,GAAG;YACb,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;YACzB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACf,CAAC;QAEf,uBAAuB,GAAG;YACtB,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE;YAC7B,aAAa,EAAE,MAAM,CAAC,MAAM,EAAE;SACnB,CAAC;QAEhB,WAAW,GAAG;YACV,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE;SAClB,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,gBAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC5B,UAAE,CAAC,4BAA4B,EAAE,CAAO,IAAI,EAAE,EAAE;YAC5C,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAwB,EAAE;gBAC9C,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YACpD,CAAC,CAAC;YAEF,uBAAuB,GAAG,GAAG,EAAE,GAAG,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;YAE3D,MAAM,MAAM,GAAe,MAAM,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAElE,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACrF,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,oBAAoB,EAAE,CAAO,IAAI,EAAE,EAAE;YACpC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAkB,EAAE;gBACxC,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAe,MAAM,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAClE,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,CAAC,CAAA,CAAC,CAAC;QAEH,UAAE,CAAC,qBAAqB,EAAE,CAAO,IAAI,EAAE,EAAE;YACrC,cAAc,CAAC,EAAE,CAAC,GAAG,GAAG,GAAgC,EAAE;gBACtD,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAe,MAAM,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAClE,aAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;QACzE,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport * as proxyquire from 'proxyquire';\r\nimport { reset, mock } from 'ts-mockito';\r\nimport { UserRepository } from '../repositories/user.repository';\r\nimport { TokenModel } from '../models/token.model';\r\nimport { UserModel } from '../models/user.model';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\nconst connectionMock = {\r\n    DB: { get: () => { /**/ } },\r\n    _initialize: () => { /**/ }\r\n}\r\n\r\nlet generateAccessTokenMock = () => { /**/ }\r\n\r\nconst testUserRepository = proxyquire('../repositories/user.repository', {\r\n    '../utils/db': {\r\n        Connection: connectionMock\r\n    },\r\n    '../utils/utils': {\r\n        generateAccessToken: generateAccessTokenMock\r\n    }\r\n});\r\n\r\ndescribe('User Repository', () => {\r\n    const userRepositoryMock: UserRepository = mock(UserRepository);\r\n    let repository: UserRepository;\r\n    let CorrectTokenModelResult: TokenModel;\r\n    let UserModelParam: UserModel;\r\n    let ErrorResult: Error;\r\n\r\n    beforeEach(() => {\r\n        reset(userRepositoryMock);\r\n        repository = new testUserRepository.UserRepository();\r\n\r\n        UserModelParam = {\r\n            username: chance.string(),\r\n            password: chance.string()\r\n        } as UserModel;\r\n\r\n        CorrectTokenModelResult = {\r\n            access_token: chance.string(),\r\n            refresh_token: chance.string()\r\n        } as TokenModel;\r\n\r\n        ErrorResult = {\r\n            message: chance.string()\r\n        } as Error;\r\n    });\r\n\r\n    describe('login function', () => {\r\n        it('should return Access Token', async (done) => {\r\n            connectionMock.DB.get = (): Promise<TokenModel> => {\r\n                done();\r\n                return Promise.resolve(CorrectTokenModelResult);\r\n            };\r\n\r\n            generateAccessTokenMock = () => { return chance.string(); }\r\n\r\n            const result: TokenModel = await repository.login(UserModelParam);\r\n\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(CorrectTokenModelResult));\r\n        });\r\n\r\n        it('should return Null', async (done) => {\r\n            connectionMock.DB.get = (): Promise<null> => {\r\n                done();\r\n                return Promise.resolve(null);\r\n            };\r\n\r\n            const result: TokenModel = await repository.login(UserModelParam);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(null));\r\n        });\r\n\r\n        it('should return Error', async (done) => {\r\n            connectionMock.DB.get = (): Promise<TokenModel | Error> => {\r\n                done();\r\n                return Promise.resolve(new Error());\r\n            };\r\n\r\n            const result: TokenModel = await repository.login(UserModelParam);\r\n            expect(JSON.stringify(result)).to.equal(JSON.stringify(ErrorResult));\r\n        });\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"330f66fd4167306f4903e176f6976b2ee28a534b","contentHash":"1045e4094a94470d1d3a08a6a22a774e7b1277e981a59ef024ef0210210009c4"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\repositories\\user.repository.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\repositories\\user.repository.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":35}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":41}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":30}},"6":{"start":{"line":10,"column":8},"end":{"line":28,"column":11}},"7":{"start":{"line":11,"column":24},"end":{"line":26,"column":14}},"8":{"start":{"line":12,"column":16},"end":{"line":25,"column":19}},"9":{"start":{"line":13,"column":20},"end":{"line":24,"column":21}},"10":{"start":{"line":14,"column":24},"end":{"line":17,"column":27}},"11":{"start":{"line":19,"column":25},"end":{"line":24,"column":21}},"12":{"start":{"line":20,"column":24},"end":{"line":20,"column":36}},"13":{"start":{"line":23,"column":24},"end":{"line":23,"column":38}},"14":{"start":{"line":27,"column":12},"end":{"line":27,"column":23}},"15":{"start":{"line":31,"column":0},"end":{"line":31,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":21},"end":{"line":29,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":55},"end":{"line":10,"column":56}},"loc":{"start":{"line":10,"column":68},"end":{"line":28,"column":9}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":42},"end":{"line":11,"column":43}},"loc":{"start":{"line":11,"column":63},"end":{"line":26,"column":13}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":164},"end":{"line":12,"column":165}},"loc":{"start":{"line":12,"column":178},"end":{"line":25,"column":17}},"line":12}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":20},"end":{"line":24,"column":21}},"type":"if","locations":[{"start":{"line":13,"column":20},"end":{"line":24,"column":21}},{"start":{"line":13,"column":20},"end":{"line":24,"column":21}}],"line":13},"1":{"loc":{"start":{"line":13,"column":24},"end":{"line":13,"column":50}},"type":"binary-expr","locations":[{"start":{"line":13,"column":24},"end":{"line":13,"column":27}},{"start":{"line":13,"column":31},"end":{"line":13,"column":50}}],"line":13},"2":{"loc":{"start":{"line":19,"column":25},"end":{"line":24,"column":21}},"type":"if","locations":[{"start":{"line":19,"column":25},"end":{"line":24,"column":21}},{"start":{"line":19,"column":25},"end":{"line":24,"column":21}}],"line":19}},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":3,"7":3,"8":3,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":2},"f":{"0":3,"1":3,"2":3,"3":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/repositories/user.repository.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/repositories/user.repository.ts"],"names":[],"mappings":";;;;AAAA,oCAAyC;AACzC,0CAAqD;AAQrD,eAAU,CAAC,WAAW,EAAE,CAAC;AAEzB,MAAa,cAAc;IAEZ,KAAK,CAChB,SAAoB;;YAEpB,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChD,eAAU,CAAC,EAAE,CAAC,GAAG,CAAC,8DAA8D,SAAS,CAAC,QAAQ,qBAAqB,SAAS,CAAC,QAAQ,IAAI,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;oBAEpK,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,IAAI,CAAC,EAAE;wBAC9B,OAAO,CAAC;4BACN,YAAY,EAAE,2BAAmB,CAAC,cAAc,EAAE,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC;4BAC1E,aAAa,EAAE,2BAAmB,CAAC,eAAe,EAAE,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC;yBAC/D,CAAC,CAAC;qBAClB;yBACI,IAAG,GAAG,EAAE;wBACX,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb;yBACI;wBACH,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;gBACH,CAAC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAC;YAEH,OAAO,GAAiB,CAAC;QAC3B,CAAC;KAAA;CACF;AAzBD,wCAyBC","sourcesContent":["import { Connection } from '../utils/db';\r\nimport { generateAccessToken } from '../utils/utils';\r\nimport {\r\n  TokenModel\r\n} from '../models/token.model';\r\nimport {\r\n  UserModel\r\n} from '../models/user.model';\r\n\r\nConnection._initialize();\r\n\r\nexport class UserRepository {\r\n\r\n  public async login(\r\n    userModel: UserModel\r\n  ): Promise<TokenModel> {\r\n    const res = await new Promise((resolve, reject) => {\r\n      Connection.DB.get(`SELECT count(*) as userCounts FROM users WHERE username = '${userModel.username}' AND password = '${userModel.password}';`, (err: any, row: any) => {\r\n        \r\n        if (row && row.userCounts == 1) {\r\n          resolve({\r\n            access_token: generateAccessToken(\"ACCESS_TOKEN\", userModel.username, 300),\r\n            refresh_token: generateAccessToken(\"REFRESH_TOKEN\", userModel.username, 900)\r\n          } as TokenModel);\r\n        }\r\n        else if(err) {\r\n          reject(err);\r\n        }\r\n        else {\r\n          resolve(null);\r\n        }\r\n      })\r\n    });\r\n\r\n    return res as TokenModel;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4c441d661832ebc6936931cd4e13eddc3942c2a1","contentHash":"d9710cf96698e25a9ec16e9b9e5054506c15e573c4e2574ba1a36ce07426c316"},"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.service.spec.ts":{"path":"C:\\Users\\pci189.SERVER7\\Desktop\\Node Interview\\OctopusInterview\\src\\test\\user.service.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":30}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":32}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":42}},"6":{"start":{"line":8,"column":26},"end":{"line":8,"column":68}},"7":{"start":{"line":9,"column":23},"end":{"line":9,"column":58}},"8":{"start":{"line":10,"column":15},"end":{"line":10,"column":36}},"9":{"start":{"line":11,"column":0},"end":{"line":34,"column":3}},"10":{"start":{"line":12,"column":31},"end":{"line":12,"column":82}},"11":{"start":{"line":13,"column":39},"end":{"line":13,"column":80}},"12":{"start":{"line":17,"column":4},"end":{"line":28,"column":7}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":47}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":77}},"15":{"start":{"line":20,"column":8},"end":{"line":23,"column":10}},"16":{"start":{"line":24,"column":8},"end":{"line":27,"column":10}},"17":{"start":{"line":29,"column":4},"end":{"line":33,"column":8}},"18":{"start":{"line":29,"column":51},"end":{"line":33,"column":6}},"19":{"start":{"line":30,"column":8},"end":{"line":30,"column":121}},"20":{"start":{"line":31,"column":23},"end":{"line":31,"column":58}},"21":{"start":{"line":32,"column":8},"end":{"line":32,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":32},"end":{"line":11,"column":33}},"loc":{"start":{"line":11,"column":38},"end":{"line":34,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":23},"end":{"line":17,"column":24}},"loc":{"start":{"line":17,"column":29},"end":{"line":28,"column":5}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":45},"end":{"line":29,"column":46}},"loc":{"start":{"line":29,"column":51},"end":{"line":33,"column":6}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":93},"end":{"line":29,"column":94}},"loc":{"start":{"line":29,"column":106},"end":{"line":33,"column":5}},"line":29}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1},"f":{"0":1,"1":1,"2":1,"3":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.service.spec.ts","sources":["C:/Users/pci189.SERVER7/Desktop/Node Interview/OctopusInterview/src/test/user.service.spec.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,+BAA8B;AAC9B,iCAAiD;AACjD,2CAAyD;AACzD,qEAAiE;AACjE,2DAAuD;AAIvD,MAAM,MAAM,GAAkB,IAAI,eAAM,EAAE,CAAC;AAE3C,gBAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IACzB,MAAM,kBAAkB,GAAmB,iBAAI,CAAC,gCAAc,CAAC,CAAC;IAChE,MAAM,0BAA0B,GAAmB,qBAAQ,CAAC,kBAAkB,CAAC,CAAC;IAChF,IAAI,OAAoB,CAAC;IACzB,IAAI,uBAAmC,CAAC;IACxC,IAAI,cAAyB,CAAC;IAE9B,kBAAU,CAAC,GAAG,EAAE;QACZ,kBAAK,CAAC,kBAAkB,CAAC,CAAC;QAC1B,OAAO,GAAG,IAAI,0BAAW,CAAC,0BAA0B,CAAC,CAAC;QACtD,cAAc,GAAG;YACb,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;YACzB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE;SACf,CAAC;QAEf,uBAAuB,GAAG;YACtB,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE;YAC7B,aAAa,EAAE,MAAM,CAAC,MAAM,EAAE;SACnB,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,UAAE,CAAC,4BAA4B,EAAE,GAAS,EAAE;QACxC,iBAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CACrD,OAAO,CAAC,OAAO,CAAa,uBAAuB,CAAC,CACvD,CAAC;QACF,MAAM,MAAM,GAAe,MAAM,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC/D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACrD,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Chance } from 'chance';\r\nimport { expect } from 'chai';\r\nimport { describe, it, beforeEach } from 'mocha';\r\nimport { instance, mock, reset, when } from 'ts-mockito';\r\nimport { UserRepository } from '../repositories/user.repository';\r\nimport { UserService } from '../services/user.service';\r\nimport { TokenModel } from '../models/token.model';\r\nimport { UserModel } from '../models/user.model';\r\n\r\nconst chance: Chance.Chance = new Chance();\r\n\r\ndescribe('UserService', () => {\r\n    const userRepositoryMock: UserRepository = mock(UserRepository);\r\n    const userRepositoryMockInstance: UserRepository = instance(userRepositoryMock);\r\n    let service: UserService;\r\n    let CorrectTokenModelResult: TokenModel;\r\n    let UserModelParam: UserModel;\r\n\r\n    beforeEach(() => {\r\n        reset(userRepositoryMock);\r\n        service = new UserService(userRepositoryMockInstance);\r\n        UserModelParam = {\r\n            username: chance.string(),\r\n            password: chance.string()\r\n        } as UserModel;\r\n\r\n        CorrectTokenModelResult = {\r\n            access_token: chance.string(),\r\n            refresh_token: chance.string()\r\n        } as TokenModel;\r\n    });\r\n\r\n    it('should return Access Token', async () => {\r\n        when(userRepositoryMock.login(UserModelParam)).thenReturn(\r\n            Promise.resolve<TokenModel>(CorrectTokenModelResult)\r\n        );\r\n        const result: TokenModel = await service.login(UserModelParam);\r\n        expect(result).to.equal(CorrectTokenModelResult);\r\n    });\r\n});\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"eb431f5a759251c4e55d675606311155f42dba79","contentHash":"54767fcc773ad4354c957ad1df9ad0d1f9442de2aec013da5d363413c84a4d39"}}